{"version":3,"sources":["Data.js","App.js","reportWebVitals.js","index.js"],"names":["State","useState","data","setData","getCovidData","a","fetch","resp","json","console","log","statewise","useEffect","className","map","curEle","ind","confirmed","state","recovered","deaths","active","lastupdatedtime","App","Data","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0QAsEeA,EAnED,WACV,MAAyBC,mBAAS,IAAlC,mBAAOC,EAAP,KAAcC,EAAd,KAEMC,EAAY,uCAAE,8BAAAC,EAAA,sEACCC,MAAM,0CADP,cACXC,EADW,gBAEEA,EAAKC,OAFP,OAEXN,EAFW,OAGjBO,QAAQC,IAAIR,EAAKS,WACjBR,EAAQD,EAAKS,WAJI,2CAAF,qDAalB,OANAC,qBAAU,WACNR,MACD,IAKC,mCAEI,qBAAKS,UAAU,kBAAf,SACI,sBAAKA,UAAY,eAAjB,UACA,qBAAIA,UAAU,OAAd,UAAqB,sBAAMA,UAAU,OAAhB,mBAArB,eAAoE,sBAAMA,UAAU,OAAhB,qBAEpE,qBAAKA,UAAY,mBAAjB,SACI,wBAAOA,UAAW,QAAlB,UACI,uBAAOA,UAAY,aAAnB,SACI,+BACI,uCACA,2CACA,2CACA,wCACA,wCACA,mDAGR,uBAAOA,UAAU,aAAjB,SAGIX,EAAKY,KAAI,SAACC,EAAQC,GAEd,GAAuB,GAApBD,EAAOE,UAEN,OACI,+BACI,6BAAKF,EAAOG,QACZ,6BAAKH,EAAOE,YACZ,6BAAKF,EAAOI,YACZ,oBAAIN,UAAU,SAAd,SAAwBE,EAAOK,SAC/B,oBAAIP,UAAU,SAAd,SAAwBE,EAAOM,SAC/B,6BAAKN,EAAOO,uCCzCzCC,MARf,WACE,OACE,8BACE,cAACC,EAAD,OCMSC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.c384090d.chunk.js","sourcesContent":["import React,{useState,useEffect} from 'react'\r\nimport \"./data.css\";\r\n\r\nconst State = () => {\r\n    const [data , setData] = useState([]);\r\n\r\n    const getCovidData =async () =>{\r\n       const resp =await fetch(\"https://api.covid19india.org/data.json\");\r\n       const data = await resp.json();; \r\n       console.log(data.statewise);\r\n       setData(data.statewise);\r\n    }\r\n\r\n    useEffect(() => {\r\n        getCovidData();\r\n    }, []);\r\n\r\n\r\n\r\n    return (\r\n        <>\r\n            \r\n            <div className=\"container-fluid\">\r\n                <div className = \"main_heading\">\r\n                <h1 className=\"head\"><span className=\"span\">COVID</span>  STATEWISE <span className=\"span\">DATA</span></h1>\r\n            \r\n                <div className = \"table-responsive\">\r\n                    <table className =\"table\" >\r\n                        <thead className = \"table_head\">\r\n                            <tr>\r\n                                <th>State</th>\r\n                                <th>Confirmed</th>\r\n                                <th>Recovered</th>\r\n                                <th>Deaths</th>\r\n                                <th>Active</th>\r\n                                <th>Last Updated</th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody className=\"table_body\">\r\n                        {\r\n                            // eslint-disable-next-line array-callback-return\r\n                            data.map((curEle, ind) => {\r\n\r\n                                if(curEle.confirmed == 0){}\r\n                                else{\r\n                                    return(\r\n                                        <tr>\r\n                                            <th>{curEle.state}</th>\r\n                                            <td>{curEle.confirmed}</td>\r\n                                            <td>{curEle.recovered}</td>\r\n                                            <td className=\"deaths\">{curEle.deaths}</td>\r\n                                            <td className=\"active\">{curEle.active}</td>\r\n                                            <td>{curEle.lastupdatedtime}</td>\r\n                                        </tr> \r\n                                    )\r\n                                }\r\n                                \r\n                            })\r\n                        }\r\n                         \r\n                        \r\n                        </tbody>\r\n                    </table>\r\n                </div>   \r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default State\r\n","\nimport './App.css';\nimport Data from './Data';\nfunction App() {\n  return (\n    <div>\n      <Data />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}